Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.

Docker Daemon API Exposure

STRIDE Pillar: Spoofing
Description: The Docker daemon listens on a socket that can be accessed over the network. If not properly secured, an attacker could spoof legitimate requests to control Docker containers, leading to unauthorized actions.
Vulnerable Base Images

STRIDE Pillar: Tampering
Description: Docker images can be built from base images that contain known vulnerabilities. An attacker could exploit these vulnerabilities to tamper with the application or gain unauthorized access.
Container Privileges

STRIDE Pillar: Elevation of Privilege
Description: Containers often run with elevated privileges. If an attacker gains access to a container, they may escalate their privileges to the host system, compromising the entire environment.
Insecure Volume Mounts

STRIDE Pillar: Information Disclosure
Description: If sensitive data is mounted into containers without proper access controls, an attacker could access or modify this data, leading to information disclosure.
Network Configuration

STRIDE Pillar: Denial of Service
Description: Misconfigured network settings can allow an attacker to flood the network with traffic, leading to denial of service conditions that disrupt communication between containers.

Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.

Kubernetes API Server

STRIDE Pillar: Tampering
Description: The API server is the central management entity for the cluster. An attacker could tamper with requests to the API server to manipulate resources or configurations within the cluster.
etcd Data Store

STRIDE Pillar: Information Disclosure
Description: etcd stores sensitive cluster data, including secrets and configurations. If access controls are weak, an attacker could gain unauthorized access to this data.
RBAC Misconfigurations

STRIDE Pillar: Elevation of Privilege
Description: Misconfigurations in Role-Based Access Control (RBAC) can allow unauthorized users to gain access to resources they should not have, leading to privilege escalation.
Pod Security Policies

STRIDE Pillar: Denial of Service
Description: If pod security policies are not enforced, an attacker could deploy malicious pods that consume excessive resources, leading to denial of service conditions.
Network Policies

STRIDE Pillar: Spoofing
Description: Inadequate network policies can allow an attacker to send malicious traffic to sensitive services within the cluster, potentially compromising those services.


Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).

[FAIL] 3.19 Ensure that /etc/default/docker file ownership is set to root:root (Manual)

Audit: 
You should execute the command below to verify that the file is individually owned and 
group owned by root: 
stat -c %U:%G /etc/default/docker | grep -v root:root  
The command above should return no results. 
Remediation: 
You should execute the following command 
chown root:root /etc/default/docker


[FAIL] 3.22 Ensure that /etc/default/docker file permissions are set to 644 or more restrictive (Manual)

You should execute the command below to verify that the file permissions are correctly set 
to 644 or more restrictively: 
stat -c %a /etc/default/docker 
Remediation: 
You should execute the following command: 
chmod 644 /etc/default/docker 
This sets the file permissions for this file to 644.


[FAIL] 4.5 Ensure Content trust for Docker is Enabled (Manual)

Audit: 
You should execute the following command: 
echo $DOCKER_CONTENT_TRUST  
This should return a value of 1. 
Remediation: 
To enable content trust in a bash shell, you should enter the following command: 
export DOCKER_CONTENT_TRUST=1